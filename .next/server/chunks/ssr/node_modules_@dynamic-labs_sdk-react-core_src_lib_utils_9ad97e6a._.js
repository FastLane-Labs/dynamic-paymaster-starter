module.exports = {

"[project]/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/colors.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "TEXT_LIGHT_PRIMARY": (()=>TEXT_LIGHT_PRIMARY)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$react$2d$core$2f$src$2f$lib$2f$utils$2f$functions$2f$convertHexToRGBA$2f$convertHexToRGBA$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/convertHexToRGBA/convertHexToRGBA.js [app-ssr] (ecmascript)");
'use client';
;
const TEXT_LIGHT_PRIMARY = '#363A46';
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$react$2d$core$2f$src$2f$lib$2f$utils$2f$functions$2f$convertHexToRGBA$2f$convertHexToRGBA$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["convertHexToRGBA"])(TEXT_LIGHT_PRIMARY, 0.65);
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$react$2d$core$2f$src$2f$lib$2f$utils$2f$functions$2f$convertHexToRGBA$2f$convertHexToRGBA$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["convertHexToRGBA"])(TEXT_LIGHT_PRIMARY, 0.4);
const TEXT_DARK_BASE = '#F5F8FF';
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$react$2d$core$2f$src$2f$lib$2f$utils$2f$functions$2f$convertHexToRGBA$2f$convertHexToRGBA$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["convertHexToRGBA"])(TEXT_DARK_BASE, 0.95);
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$react$2d$core$2f$src$2f$lib$2f$utils$2f$functions$2f$convertHexToRGBA$2f$convertHexToRGBA$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["convertHexToRGBA"])(TEXT_DARK_BASE, 0.55);
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$react$2d$core$2f$src$2f$lib$2f$utils$2f$functions$2f$convertHexToRGBA$2f$convertHexToRGBA$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["convertHexToRGBA"])(TEXT_DARK_BASE, 0.4);
;
}}),
"[project]/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/values.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ChainEnumToVerifiedCredentialName": (()=>ChainEnumToVerifiedCredentialName),
    "DEFAULT_NUMBER_OF_WALLETS_TO_SHOW": (()=>DEFAULT_NUMBER_OF_WALLETS_TO_SHOW),
    "DYNAMIC_AUTH_COOKIE_NAME": (()=>DYNAMIC_AUTH_COOKIE_NAME),
    "VerifiedCredentialNameToChainEnum": (()=>VerifiedCredentialNameToChainEnum)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$api$2d$core$2f$src$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dynamic-labs/sdk-api-core/src/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$api$2d$core$2f$src$2f$models$2f$ChainEnum$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dynamic-labs/sdk-api-core/src/models/ChainEnum.js [app-ssr] (ecmascript)");
'use client';
;
const DEFAULT_NUMBER_OF_WALLETS_TO_SHOW = 10;
// references:
// https://www.iana.org/assignments/jwt/jwt.xhtml#claims
// https://github.com/jaredhanson/id-blockchain-claims-in-jwt/blob/main/draft.md
const ChainEnumToVerifiedCredentialName = {
    ALGO: 'algorand',
    BTC: 'bip122',
    COSMOS: 'cosmos',
    ETH: 'eip155',
    EVM: 'eip155',
    FLOW: 'flow',
    SOL: 'solana',
    STARK: 'starknet'
};
const VerifiedCredentialNameToChainEnum = {
    algorand: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$api$2d$core$2f$src$2f$models$2f$ChainEnum$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainEnum"].Algo,
    bip122: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$api$2d$core$2f$src$2f$models$2f$ChainEnum$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainEnum"].Btc,
    cosmos: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$api$2d$core$2f$src$2f$models$2f$ChainEnum$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainEnum"].Cosmos,
    eip155: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$api$2d$core$2f$src$2f$models$2f$ChainEnum$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainEnum"].Evm,
    flow: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$api$2d$core$2f$src$2f$models$2f$ChainEnum$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainEnum"].Flow,
    solana: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$api$2d$core$2f$src$2f$models$2f$ChainEnum$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainEnum"].Sol,
    starknet: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$api$2d$core$2f$src$2f$models$2f$ChainEnum$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainEnum"].Stark
};
const DYNAMIC_AUTH_COOKIE_NAME = 'DYNAMIC_JWT_TOKEN';
;
}}),
"[project]/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/localStorage.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AUTH_EXPIRES_AT": (()=>AUTH_EXPIRES_AT),
    "AUTH_MIN_TOKEN": (()=>AUTH_MIN_TOKEN),
    "AUTH_TOKEN": (()=>AUTH_TOKEN),
    "BRIDGE_ONBOARDING_COMPLETED": (()=>BRIDGE_ONBOARDING_COMPLETED),
    "CAPTCHA_TOKEN": (()=>CAPTCHA_TOKEN),
    "CONNECTED_WALLET_NAME_SERVICE": (()=>CONNECTED_WALLET_NAME_SERVICE),
    "DEVICE_FINGERPRINT": (()=>DEVICE_FINGERPRINT),
    "DYNAMIC_CONTEXT_LAST_SESSION_SETTINGS": (()=>DYNAMIC_CONTEXT_LAST_SESSION_SETTINGS),
    "EMBEDDED_WALLET_SECURE_BANNER": (()=>EMBEDDED_WALLET_SECURE_BANNER),
    "EMBEDDED_WALLET_SESSION_SETTINGS": (()=>EMBEDDED_WALLET_SESSION_SETTINGS),
    "LAST_USED_WALLET": (()=>LAST_USED_WALLET),
    "NEWTOWEB3_WALLET_EXTENSION_FLAG_KEY": (()=>NEWTOWEB3_WALLET_EXTENSION_FLAG_KEY),
    "PHANTOM_SIGNATURE_STATE": (()=>PHANTOM_SIGNATURE_STATE),
    "PHONE_INPUT_DEFAULT_COUNTRY": (()=>PHONE_INPUT_DEFAULT_COUNTRY),
    "SECURE_ENCLAVE_WALLET_SESSION_KEYS": (()=>SECURE_ENCLAVE_WALLET_SESSION_KEYS),
    "SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS": (()=>SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS),
    "STORE_STORAGE_KEY": (()=>STORE_STORAGE_KEY),
    "WAGMI_LAST_SESSION_SETTINGS": (()=>WAGMI_LAST_SESSION_SETTINGS),
    "WALLET_PICKER_SEARCH_KEY": (()=>WALLET_PICKER_SEARCH_KEY),
    "ZERODEV_AUTHORIZATION": (()=>ZERODEV_AUTHORIZATION)
});
'use client';
const AUTH_TOKEN = 'dynamic_authentication_token';
const AUTH_MIN_TOKEN = 'dynamic_min_authentication_token';
const DEVICE_FINGERPRINT = 'dynamic_device_fingerprint';
const AUTH_EXPIRES_AT = 'dynamic_auth_expires_at';
const LAST_USED_WALLET = 'dynamic_last_used_wallet';
const WALLET_PICKER_SEARCH_KEY = 'dynamic_wallet_picker_search';
const NEWTOWEB3_WALLET_EXTENSION_FLAG_KEY = 'dynamic_newtoweb3_wallet_extension_installed';
const CONNECTED_WALLET_NAME_SERVICE = 'dynamic_connected_wallet_ns';
const BRIDGE_ONBOARDING_COMPLETED = 'dynamic_bridge_onboarding_completed';
const DYNAMIC_CONTEXT_LAST_SESSION_SETTINGS = 'dynamic_context_session_settings';
const WAGMI_LAST_SESSION_SETTINGS = 'dynamic_wagmi_session_settings';
const EMBEDDED_WALLET_SESSION_SETTINGS = 'dynamic_embedded_wallet_session_settings';
const EMBEDDED_WALLET_SECURE_BANNER = 'dynamic_embedded_secure_banner';
const PHONE_INPUT_DEFAULT_COUNTRY = 'dynamic_phone_input_default_country';
const CAPTCHA_TOKEN = 'dynamic_captcha_token';
const ZERODEV_AUTHORIZATION = 'zerodev_authorization';
/**
 * Used to identify the purpose of a signature after phantom redirects back to the app in mobile
 */ const PHANTOM_SIGNATURE_STATE = 'phantom_verification_type';
const STORE_STORAGE_KEY = 'dynamic_store';
const SECURE_ENCLAVE_WALLET_SESSION_KEYS = 'dynamic_secure_enclave_session_keys';
const SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS = {
    priority: [
        'secureStorage',
        'localStorage'
    ]
};
;
}}),
"[project]/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/errors.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ACCESS_BLOCKED_ERROR_CODE": (()=>ACCESS_BLOCKED_ERROR_CODE),
    "ACTIVE_SESSION": (()=>ACTIVE_SESSION),
    "CODE_SENT": (()=>CODE_SENT),
    "ERROR_PROCESSING_REVEAL_REQUEST": (()=>ERROR_PROCESSING_REVEAL_REQUEST),
    "ERROR_SENDING_CODE": (()=>ERROR_SENDING_CODE),
    "INCOMPATIBLE_SDK_VERSION": (()=>INCOMPATIBLE_SDK_VERSION),
    "INVALID_REQUEST": (()=>INVALID_REQUEST),
    "INVALID_WALLET_DATA": (()=>INVALID_WALLET_DATA),
    "SECURE_ENCLAVE_PROVIDER_NOT_ENABLED": (()=>SECURE_ENCLAVE_PROVIDER_NOT_ENABLED),
    "SESSION_CREATED": (()=>SESSION_CREATED),
    "SESSION_RESTORED": (()=>SESSION_RESTORED),
    "USER_HAS_V2_EMBEDDED_WALLET": (()=>USER_HAS_V2_EMBEDDED_WALLET),
    "USER_NOT_LOGGED_IN": (()=>USER_NOT_LOGGED_IN)
});
'use client';
// HEADLESS ERRORS
const ACTIVE_SESSION = 'session_active';
const ERROR_SENDING_CODE = 'error_sending_code';
const ERROR_PROCESSING_REVEAL_REQUEST = 'error_processing_reveal_request';
const INVALID_REQUEST = 'invalid_request';
const INVALID_WALLET_DATA = 'invalid_wallet';
const SECURE_ENCLAVE_PROVIDER_NOT_ENABLED = 'secure_enclave_provider_not_enabled';
const USER_NOT_LOGGED_IN = 'user_not_logged_in';
const INCOMPATIBLE_SDK_VERSION = 'incompatible_sdk_version';
const USER_HAS_V2_EMBEDDED_WALLET = 'user_has_v2_embedded_wallet';
const CODE_SENT = 'code_sent';
const SESSION_CREATED = 'session_created';
const SESSION_RESTORED = 'session_restored';
const ACCESS_BLOCKED_ERROR_CODE = 451;
;
}}),
"[project]/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/fields.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "NAME_SERVICE_FIELD_NAME": (()=>NAME_SERVICE_FIELD_NAME),
    "PHONE_NUMBER_REGEX": (()=>PHONE_NUMBER_REGEX)
});
'use client';
const PHONE_NUMBER_REGEX = /^(\+[1-9]\d{1,14})?$/;
// Reserved fields
const NAME_SERVICE_FIELD_NAME = 'name-service-subdomain-handle';
;
}}),
"[project]/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/transitions.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DURATION_DEFAULT": (()=>DURATION_DEFAULT),
    "EASING_FUNCTION_DEFAULT": (()=>EASING_FUNCTION_DEFAULT)
});
'use client';
// Easing functions
const EASING_FUNCTION_DEFAULT = 'cubic-bezier(0, 0, 0.24, 1.0)';
// Durations
const DURATION_DEFAULT = 300;
;
}}),
"[project]/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/authViewLayoutChecks.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "mfaViewsThatPreventModalClose": (()=>mfaViewsThatPreventModalClose),
    "viewsThatHideCloseButton": (()=>viewsThatHideCloseButton),
    "viewsThatHideHeader": (()=>viewsThatHideHeader),
    "viewsThatHideHelpContent": (()=>viewsThatHideHelpContent),
    "viewsThatPreventBorderBelowHeader": (()=>viewsThatPreventBorderBelowHeader),
    "viewsThatPreventModalClose": (()=>viewsThatPreventModalClose),
    "viewsThatShowConnectedWalletProgress": (()=>viewsThatShowConnectedWalletProgress),
    "viewsThatShowDynamicFooter": (()=>viewsThatShowDynamicFooter),
    "viewsWithWalletListType": (()=>viewsWithWalletListType)
});
'use client';
const viewsThatPreventBorderBelowHeader = [
    'wallet-list',
    'login-with-email-or-wallet-full-wallet-list',
    'multi-wallet-wallet-list',
    'login-with-wallet-only'
];
const viewsWithWalletListType = [
    'wallet-connect-mobile-wallets-list',
    'wallet-list',
    'login-with-email-or-wallet-full-wallet-list',
    'login-with-wallet-only'
];
const viewsThatHideHelpContent = [
    'qr-code',
    'no-qr-not-installed',
    'wallet-used',
    'chainalysis-blocked-wallet',
    'wallet-sign',
    'collect-user-data',
    'passkey-new-domain-detected'
];
const viewsThatHideHeader = [
    'collect-user-data',
    'no-access',
    'chainalysis-blocked-wallet',
    'wallet-locked-view',
    'gate-blocked-wallet',
    'email-wallet-otp-verification-view',
    'bridge-welcome',
    'bridge-summary',
    'bridge-next-wallet-connection',
    'passkey-intro',
    'passkey-new-domain-detected',
    'social-redirect-view',
    'collect-user-data-login-no-wallet',
    'passkey-recovery-bundle',
    'passkey-recovery-start',
    'embedded-reveal-view',
    'embedded-reveal-account-view',
    'rename-passkey',
    'embedded-wallet-auth-choice',
    'passkey-recovery-add-email',
    'global-wallet-confirm',
    'global-wallet-malicious',
    'global-wallet-info',
    'mfa-choose-device',
    'mfa-verification'
];
const viewsThatShowConnectedWalletProgress = [
    'wallet-list',
    'qr-code',
    'wallet-connect-mobile-wallets-list',
    'pending-connect',
    'pending-signature',
    'pending-signature-without-back-button',
    'bridge-next-wallet-connection',
    'bridge-summary'
];
const viewsThatShowDynamicFooter = [
    'login-with-email-or-wallet',
    'login-with-email-or-wallet-full-wallet-list',
    'login-with-wallet-only',
    'login-with-email-verification',
    'login-with-sms-verification',
    'verify-email',
    'verify-sms',
    'pending-connect',
    'wallet-group',
    'select-wallet-in-wallet-group',
    'select-hardware-wallet',
    'pending-signature',
    'qr-code',
    'wallet-used',
    'email-wallet-otp-verification-view',
    'farcaster-connect-view',
    'merge-user-accounts',
    'merge-user-accounts-conflicts',
    'mfa-verification',
    'mfa-display-backup-codes',
    'mfa-recovery'
];
/**
 * User is not able to close the modal in these views at all
 */ const viewsThatPreventModalClose = [
    'collect-user-data',
    'login-with-email-verification',
    'login-with-sms-verification'
];
/**
 * When hasPendingMfaAction returns true, user is not able to close the modal in these views at all
 */ const mfaViewsThatPreventModalClose = [
    'mfa-verification',
    'mfa-choose-device',
    'mfa-secure-device',
    'mfa-display-backup-codes',
    'mfa-recovery'
];
/**
 * These views only hide the close button, but unless they are also
 * in the viewsThatPreventModalClose array, the user can still close the modal
 * via other means (such as pressing the escape key or clicking the backdrop).
 */ const viewsThatHideCloseButton = [
    'login-with-email-or-wallet-full-wallet-list',
    'login-with-email-verification',
    'login-with-sms-verification',
    'network-not-supported',
    'passkey-recovery-complete',
    'passkey-recovery-start',
    'passkey-recovery-bundle',
    'rename-passkey',
    'mobile-wallet-redirect-view',
    'qr-code',
    'mfa-verification',
    'mfa-display-backup-codes',
    'mfa-recovery',
    'user-delete-account'
];
;
}}),
"[project]/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/erc20/abi.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "erc20Abi": (()=>erc20Abi)
});
'use client';
/* eslint-disable max-len */ const erc20Abi = [
    {
        constant: true,
        inputs: [],
        name: 'name',
        outputs: [
            {
                name: '',
                type: 'string'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: false,
        inputs: [
            {
                name: '_spender',
                type: 'address'
            },
            {
                name: '_value',
                type: 'uint256'
            }
        ],
        name: 'approve',
        outputs: [
            {
                name: '',
                type: 'bool'
            }
        ],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        constant: true,
        inputs: [],
        name: 'totalSupply',
        outputs: [
            {
                name: '',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: false,
        inputs: [
            {
                name: '_from',
                type: 'address'
            },
            {
                name: '_to',
                type: 'address'
            },
            {
                name: '_value',
                type: 'uint256'
            }
        ],
        name: 'transferFrom',
        outputs: [
            {
                name: '',
                type: 'bool'
            }
        ],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        constant: true,
        inputs: [],
        name: 'decimals',
        outputs: [
            {
                name: '',
                type: 'uint8'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: true,
        inputs: [
            {
                name: '_owner',
                type: 'address'
            }
        ],
        name: 'balanceOf',
        outputs: [
            {
                name: 'balance',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: true,
        inputs: [],
        name: 'symbol',
        outputs: [
            {
                name: '',
                type: 'string'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        constant: false,
        inputs: [
            {
                name: '_to',
                type: 'address'
            },
            {
                name: '_value',
                type: 'uint256'
            }
        ],
        name: 'transfer',
        outputs: [
            {
                name: '',
                type: 'bool'
            }
        ],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        constant: true,
        inputs: [
            {
                name: '_owner',
                type: 'address'
            },
            {
                name: '_spender',
                type: 'address'
            }
        ],
        name: 'allowance',
        outputs: [
            {
                name: '',
                type: 'uint256'
            }
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function'
    },
    {
        payable: true,
        stateMutability: 'payable',
        type: 'fallback'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                name: 'owner',
                type: 'address'
            },
            {
                indexed: true,
                name: 'spender',
                type: 'address'
            },
            {
                indexed: false,
                name: 'value',
                type: 'uint256'
            }
        ],
        name: 'Approval',
        type: 'event'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                name: 'from',
                type: 'address'
            },
            {
                indexed: true,
                name: 'to',
                type: 'address'
            },
            {
                indexed: false,
                name: 'value',
                type: 'uint256'
            }
        ],
        name: 'Transfer',
        type: 'event'
    }
];
;
}}),
"[project]/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/validations/validateTurnkeyProviderEnabled/validateTurnkeyProviderEnabled.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "validateTurnkeyProviderEnabled": (()=>validateTurnkeyProviderEnabled)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$utils$2f$src$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@dynamic-labs/utils/src/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$utils$2f$src$2f$errors$2f$DynamicError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dynamic-labs/utils/src/errors/DynamicError.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$react$2d$core$2f$src$2f$lib$2f$utils$2f$functions$2f$isTurnkeyEnabled$2f$isTurnkeyEnabled$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isTurnkeyEnabled/isTurnkeyEnabled.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$react$2d$core$2f$src$2f$lib$2f$utils$2f$constants$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/errors.js [app-ssr] (ecmascript)");
'use client';
;
;
;
const validateTurnkeyProviderEnabled = (projectSettings)=>{
    const isTurnkeyProviderEnabled = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$react$2d$core$2f$src$2f$lib$2f$utils$2f$functions$2f$isTurnkeyEnabled$2f$isTurnkeyEnabled$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTurnkeyEnabled"])(projectSettings);
    if (!isTurnkeyProviderEnabled) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$utils$2f$src$2f$errors$2f$DynamicError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DynamicError"]('No embedded wallet is enabled. Go to the dashboard and make sure to have both Embedded wallets and at least one EVM network enabled. Also, check if EthereumWalletConnectors is in the DynamicContextProvider > settings > walletConnectors.', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$dynamic$2d$labs$2f$sdk$2d$react$2d$core$2f$src$2f$lib$2f$utils$2f$constants$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SECURE_ENCLAVE_PROVIDER_NOT_ENABLED"]);
    }
    return isTurnkeyProviderEnabled;
};
;
}}),

};

//# sourceMappingURL=node_modules_%40dynamic-labs_sdk-react-core_src_lib_utils_9ad97e6a._.js.map