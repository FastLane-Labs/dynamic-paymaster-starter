(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_@turnkey_api-key-stamper_dist_3cded66a._.js", {

"[project]/node_modules/@turnkey/api-key-stamper/dist/utils.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "convertTurnkeyApiKeyToJwk": (()=>convertTurnkeyApiKeyToJwk)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$api$2d$key$2d$stamper$2f$dist$2f$tink$2f$elliptic_curves$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$encoding$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@turnkey/encoding/dist/index.mjs [app-client] (ecmascript)");
;
;
function convertTurnkeyApiKeyToJwk(input) {
    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;
    const jwk = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$api$2d$key$2d$stamper$2f$dist$2f$tink$2f$elliptic_curves$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pointDecode"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$encoding$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["uint8ArrayFromHexString"])(compressedPublicKeyHex));
    // Ensure that d is sufficiently padded
    jwk.d = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$encoding$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hexStringToBase64url"])(uncompressedPrivateKeyHex, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$encoding$2f$dist$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_JWK_MEMBER_BYTE_LENGTH"]);
    return jwk;
}
;
 //# sourceMappingURL=utils.mjs.map
}}),
"[project]/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "signWithApiKey": (()=>signWithApiKey)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/buffer/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$api$2d$key$2d$stamper$2f$dist$2f$utils$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@turnkey/api-key-stamper/dist/utils.mjs [app-client] (ecmascript)");
;
;
const signWithApiKey = async (input)=>{
    const { content, publicKey, privateKey } = input;
    const privateKeyObject = crypto.createPrivateKey({
        // @ts-expect-error -- the key can be a JWK object since Node v15.12.0
        // https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey
        key: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$turnkey$2f$api$2d$key$2d$stamper$2f$dist$2f$utils$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["convertTurnkeyApiKeyToJwk"])({
            uncompressedPrivateKeyHex: privateKey,
            compressedPublicKeyHex: publicKey
        }),
        format: "jwk"
    });
    const sign = crypto.createSign("SHA256");
    sign.write(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(content));
    sign.end();
    return sign.sign(privateKeyObject, "hex");
};
;
 //# sourceMappingURL=nodecrypto.mjs.map
}}),
}]);

//# sourceMappingURL=node_modules_%40turnkey_api-key-stamper_dist_3cded66a._.js.map